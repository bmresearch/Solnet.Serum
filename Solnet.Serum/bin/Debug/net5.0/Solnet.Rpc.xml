<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Solnet.Rpc</name>
    </assembly>
    <members>
        <member name="T:Solnet.Rpc.Builders.MessageBuilder">
            <summary>
            The message builder.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Builders.MessageBuilder.Encoder">
            <summary>
            The base58 encoder instance.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Builders.MessageBuilder.MessageHeader">
            <summary>
            The message header.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Builders.MessageBuilder.MessageHeader.HeaderLength">
            <summary>
            The message header length.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Builders.MessageBuilder.MessageHeader.RequiredSignatures">
            <summary>
            The number of required signatures.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Builders.MessageBuilder.MessageHeader.ReadOnlySignedAccounts">
            <summary>
            The number of read-only signed accounts.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Builders.MessageBuilder.MessageHeader.ReadOnlyUnsignedAccounts">
            <summary>
            The number of read-only non-signed accounts.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Builders.MessageBuilder.MessageHeader.ToBytes">
            <summary>
            Convert the message header to byte array format.
            </summary>
            <returns>The byte array.</returns>
        </member>
        <member name="T:Solnet.Rpc.Builders.MessageBuilder.CompiledInstruction">
            <summary>
            A compiled instruction within the message.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Builders.MessageBuilder.CompiledInstruction.Length">
            <summary>
            Get the length of the compiled instruction.
            </summary>
            <returns>The length.</returns>
        </member>
        <member name="F:Solnet.Rpc.Builders.MessageBuilder.BlockHashLength">
            <summary>
            The length of the block hash.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Builders.MessageBuilder._messageHeader">
            <summary>
            The message header.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Builders.MessageBuilder._accountKeysList">
            <summary>with read-write accounts first and read-only accounts following.
            The account keys list.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Builders.MessageBuilder.Instructions">
            <summary>
            The list of instructions contained within this transaction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Builders.MessageBuilder.RecentBlockHash">
            <summary>
            The hash of a recent block.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Builders.MessageBuilder.FeePayer">
            <summary>
            The transaction fee payer.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Builders.MessageBuilder.#ctor">
            <summary>
            Initialize the message builder.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Builders.MessageBuilder.AddInstruction(Solnet.Rpc.Models.TransactionInstruction)">
            <summary>
            Add an instruction to the message.
            </summary>
            <param name="instruction">The instruction to add to the message.</param>
            <returns>The message builder, so instruction addition can be chained.</returns>
        </member>
        <member name="M:Solnet.Rpc.Builders.MessageBuilder.Build">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Solnet.Rpc.Builders.MessageBuilder.GetAccountKeys">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Solnet.Rpc.Builders.MessageBuilder.FindAccountIndex(System.Collections.Generic.IList{Solnet.Rpc.Models.AccountMeta},System.Byte[])">
            <summary>
            
            </summary>
            <param name="accountMetas"></param>
            <param name="publicKey"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Solnet.Rpc.Builders.TransactionBuilder">
            <summary>
            Implements a builder for transactions.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Builders.TransactionBuilder.SignatureLength">
            <summary>
            The length of a signature.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Builders.TransactionBuilder._messageBuilder">
            <summary>
            The builder of the message contained within the transaction.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Builders.TransactionBuilder._signatures">
            <summary>
            The signatures present in the message.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Builders.TransactionBuilder._serializedMessage">
            <summary>
            The message after being serialized.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Builders.TransactionBuilder.#ctor">
            <summary>
            Default constructor that initializes the transaction builder.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Builders.TransactionBuilder.GetSigners">
            <summary>
            Gets the signers for the current transaction.
            </summary>
            <returns>An enumerable with the signers.</returns>
        </member>
        <member name="M:Solnet.Rpc.Builders.TransactionBuilder.Serialize">
            <summary>
            Serializes the message into a byte array.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Builders.TransactionBuilder.Sign">
            <summary>
            Sign the transaction message with each of the signer's keys.
            </summary>
            <exception cref="T:System.Exception">Throws exception when the list of signers is null or empty.</exception>
        </member>
        <member name="M:Solnet.Rpc.Builders.TransactionBuilder.SetRecentBlockHash(System.String)">
            <summary>
            Sets the recent block hash for the transaction.
            </summary>
            <param name="recentBlockHash">The recent block hash as a base58 encoded string.</param>
            <returns>The transaction builder, so instruction addition can be chained.</returns>
        </member>
        <member name="M:Solnet.Rpc.Builders.TransactionBuilder.SetFeePayer(Solnet.Wallet.Account)">
            <summary>
            Sets the fee payer for the transaction.
            </summary>
            <param name="account">The account that will pay the transaction fee</param>
            <returns>The transaction builder, so instruction addition can be chained.</returns>
        </member>
        <member name="M:Solnet.Rpc.Builders.TransactionBuilder.AddInstruction(Solnet.Rpc.Models.TransactionInstruction)">
            <summary>
            Adds a new instruction to the transaction.
            </summary>
            <param name="instruction">The instruction to add.</param>
            <returns>The transaction builder, so instruction addition can be chained.</returns>
        </member>
        <member name="M:Solnet.Rpc.Builders.TransactionBuilder.Build">
            <summary>
            Signs the transaction's message with the passed list of signers and adds them to the transaction, serializing it.
            </summary>
            <returns>The serialized transaction.</returns>
        </member>
        <member name="T:Solnet.Rpc.ClientFactory">
            <summary>
            Implements a client factory for Solana RPC and Streaming RPC APIs.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.ClientFactory.RpcDevNet">
            <summary>
            The dev net cluster.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.ClientFactory.RpcTestNet">
            <summary>
            The test net cluster.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.ClientFactory.RpcMainNet">
            <summary>
            The main net cluster.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.ClientFactory.StreamingRpcDevNet">
            <summary>
            The dev net cluster.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.ClientFactory.StreamingRpcTestNet">
            <summary>
            The test net cluster.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.ClientFactory.StreamingRpcMainNet">
            <summary>
            The main net cluster.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.ClientFactory.GetClient(Solnet.Rpc.Cluster,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Instantiate a http client.
            </summary>
            <param name="cluster">The network cluster.</param>
            <param name="logger">The logger.</param>
            <returns>The http client.</returns>
        </member>
        <member name="M:Solnet.Rpc.ClientFactory.GetClient(System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Instantiate a http client.
            </summary>
            <param name="url">The network cluster url.</param>
            <param name="logger">The logger.</param>
            <returns>The http client.</returns>
        </member>
        <member name="M:Solnet.Rpc.ClientFactory.GetStreamingClient(Solnet.Rpc.Cluster,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Instantiate a streaming client.
            </summary>
            <param name="cluster">The network cluster.</param>
            <param name="logger">The logger.</param>
            <returns>The streaming client.</returns>
        </member>
        <member name="M:Solnet.Rpc.ClientFactory.GetStreamingClient(System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Instantiate a streaming client.
            </summary>
            <param name="url">The network cluster url.</param>
            <param name="logger">The logger.</param>
            <returns>The streaming client.</returns>
        </member>
        <member name="T:Solnet.Rpc.Cluster">
            <summary>
            Represents the public solana clusters.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Cluster.DevNet">
            <summary>
            Devnet serves as a playground for anyone who wants to take Solana for a test drive, as a user, token holder, app developer, or validator.
            </summary>
            <remarks>
            Application developers should target Devnet.
            Potential validators should first target Devnet.
            Key points:
             <list type="bullet">  
               <item>Devnet tokens are not real</item>
               <item>Devnet includes a token faucet for airdrops for application testing</item>
               <item>Devnet may be subject to ledger resets</item>
               <item>Devnet typically runs a newer software version than Mainnet Beta</item>
            </list>
            </remarks>
        </member>
        <member name="F:Solnet.Rpc.Cluster.TestNet">
            <summary>
            Testnet is where Solana stress tests recent release features on a live cluster, particularly focused on network performance, stability and validator behavior.
            </summary>
            <remarks>
            Tour de SOL initiative runs on Testnet, where malicious behavior and attacks are encouraged on the network to help find and squash bugs or network vulnerabilities.
            Key points:
            <list type="bullet">
               <item>Devnet tokens are not real</item>
               <item>Devnet includes a token faucet for airdrops for application testing</item>
               <item>Devnet may be subject to ledger resets</item>
               <item>Testnet typically runs a newer software release than both Devnet and Mainnet Beta</item>
            </list>
            </remarks>
        </member>
        <member name="F:Solnet.Rpc.Cluster.MainNet">
            <summary>
            A permissionless, persistent cluster for early token holders and launch partners. Currently, rewards and inflation are disabled.
            </summary>
            <remarks>
            Tokens that are issued on Mainnet Beta are real SOL.
            </remarks>
        </member>
        <member name="T:Solnet.Rpc.Core.Http.KeyValue">
            <summary>
            Helper class that holds a key-value config pair that filters out null values.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Core.Http.ConfigObject">
            <summary>
            Helper class to create configuration objects with key-value pairs that filters out null values.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Core.Http.Parameters">
            <summary>
            Helper class that creates a List of parameters and filters out null values.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Core.Http.JsonRpcClient">
            <summary>
            Base Rpc client class that abstracts the HttpClient handling.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Http.JsonRpcClient._serializerOptions">
            <summary>
            The Json serializer options to be reused between calls.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Http.JsonRpcClient._httpClient">
            <summary>
            The HttpClient.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Http.JsonRpcClient._logger">
            <summary>
            The logger instance.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Http.JsonRpcClient.NodeAddress">
            <inheritdoc cref="P:Solnet.Rpc.IRpcClient.NodeAddress"/>
        </member>
        <member name="M:Solnet.Rpc.Core.Http.JsonRpcClient.#ctor(System.String,Microsoft.Extensions.Logging.ILogger,System.Net.Http.HttpClient)">
            <summary>
            The internal constructor that setups the client.
            </summary>
            <param name="url">The url of the RPC server.</param>
            <param name="logger">The possible logger instance.</param>
            <param name="httpClient">The possible HttpClient instance. If null, a new instance will be created.</param>
        </member>
        <member name="M:Solnet.Rpc.Core.Http.JsonRpcClient.SendRequest``1(Solnet.Rpc.Messages.JsonRpcRequest)">
            <summary>
            Sends a given message as a POST method and returns the deserialized message result based on the type parameter.
            </summary>
            <typeparam name="T">The type of the result to deserialize from json.</typeparam>
            <param name="req">The message request.</param>
            <returns>A task that represents the asynchronous operation that holds the request result.</returns>
        </member>
        <member name="M:Solnet.Rpc.Core.Http.JsonRpcClient.HandleResult``1(Solnet.Rpc.Messages.JsonRpcRequest,System.Net.Http.HttpResponseMessage)">
            <summary>
            Handles the result after sending a request.
            </summary>
            <typeparam name="T">The type of the result to deserialize from json.</typeparam>
            <param name="req">The original message request.</param>
            <param name="response">The response obtained from the request.</param>
            <returns>A task that represents the asynchronous operation that holds the request result.</returns>
        </member>
        <member name="T:Solnet.Rpc.Core.Http.RequestResult`1">
            <summary>
            Represents the result of a given request.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="P:Solnet.Rpc.Core.Http.RequestResult`1.WasSuccessful">
            <summary>
            Returns <c>true</c> if the request was succesffully handled and parsed.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Http.RequestResult`1.WasHttpRequestSuccessful">
            <summary>
            Returns <c>true</c> if the HTTP request was successfull (e.g. Code 200).
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Http.RequestResult`1.WasRequestSuccessfullyHandled">
            <summary>
            Returns <c>true</c> if the request was successfully handled by the server and no error parameters are found in the result.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Http.RequestResult`1.Reason">
            <summary>
            Returns a string with the reason for the error if <see cref="P:Solnet.Rpc.Core.Http.RequestResult`1.WasSuccessful"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Http.RequestResult`1.Result">
            <summary>
            Returns the actual result of the request if <see cref="P:Solnet.Rpc.Core.Http.RequestResult`1.WasSuccessful"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Http.RequestResult`1.HttpStatusCode">
            <summary>
            Returns the <see cref="P:Solnet.Rpc.Core.Http.RequestResult`1.HttpStatusCode"/> of the request.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Http.RequestResult`1.ServerErrorCode">
            <summary>
            Returns the error code if one was found in the error object when the server is unable to handle the request.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Core.IdGenerator">
            <summary>
            Id generator.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.IdGenerator._id">
            <summary>
            The id of the last request performed
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Core.IdGenerator.GetNextId">
            <summary>
            Gets the id of the next request.
            </summary>
            <returns>The id.</returns>
        </member>
        <member name="T:Solnet.Rpc.Core.Sockets.StreamingRpcClient">
            <summary>
            Base streaming Rpc client class that abstracts the websocket handling.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Sockets.StreamingRpcClient.ClientSocket">
            <summary>
            The web socket client abstraction.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Sockets.StreamingRpcClient._logger">
            <summary>
            The logger instance.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Sockets.StreamingRpcClient.NodeAddress">
            <inheritdoc cref="P:Solnet.Rpc.IStreamingRpcClient.NodeAddress"/>
        </member>
        <member name="M:Solnet.Rpc.Core.Sockets.StreamingRpcClient.#ctor(System.String,Microsoft.Extensions.Logging.ILogger,Solnet.Rpc.Core.Sockets.IWebSocket)">
            <summary>
            The internal constructor that setups the client.
            </summary>
            <param name="url">The url of the streaming RPC server.</param>
            <param name="logger">The possible logger instance.</param>
            <param name="socket">The possible websocket instance. A new instance will be created if null.</param>
        </member>
        <member name="M:Solnet.Rpc.Core.Sockets.StreamingRpcClient.Init">
            <summary>
            Initializes the websocket connection and starts receiving messages asynchronously.
            </summary>
            <returns>Returns the task representing the asynchronous task.</returns>
        </member>
        <member name="M:Solnet.Rpc.Core.Sockets.StreamingRpcClient.StartListening">
            <summary>
            Starts listeing to new messages.
            </summary>
            <returns>Returns the task representing the asynchronous task.</returns>
        </member>
        <member name="M:Solnet.Rpc.Core.Sockets.StreamingRpcClient.ReadNextMessage(System.Threading.CancellationToken)">
            <summary>
            Reads the next message from the socket.
            </summary>
            <param name="cancellationToken">The cancelation token.</param>
            <returns>Returns the task representing the asynchronous task.</returns>
        </member>
        <member name="M:Solnet.Rpc.Core.Sockets.StreamingRpcClient.HandleNewMessage(System.Memory{System.Byte})">
            <summary>
            Handless a new message payload.
            </summary>
            <param name="messagePayload">The message payload.</param>
        </member>
        <member name="T:Solnet.Rpc.Core.Sockets.SubscriptionChannel">
            <summary>
            Represents the channel of a given subscription.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Sockets.SubscriptionChannel.Account">
            <summary>
            Account subscription (<c>accountSubscribe</c>). 
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Sockets.SubscriptionChannel.Logs">
            <summary>
            Logs subscription (<c>logsSubscribe</c>). 
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Sockets.SubscriptionChannel.Program">
            <summary>
            Program subscription (<c>programSubscribe</c>). 
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Sockets.SubscriptionChannel.Signature">
            <summary>
            Signature subscription (<c>signatureSubscribe</c>). 
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Sockets.SubscriptionChannel.Slot">
            <summary>
            Slot subscription (<c>slotSubscribe</c>). 
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Sockets.SubscriptionChannel.Root">
            <summary>
            Root subscription (<c>rootSubscribe</c>). 
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Core.Sockets.SubscriptionEvent">
            <summary>
            Represents an event related to a given subscription.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Sockets.SubscriptionEvent.Status">
            <summary>
            The new status of the subscription.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Sockets.SubscriptionEvent.Error">
            <summary>
            A possible error mssage for this event.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Sockets.SubscriptionEvent.Code">
            <summary>
            A possible error code for this event.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Core.Sockets.SubscriptionEvent.#ctor(Solnet.Rpc.Core.Sockets.SubscriptionStatus,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="status">The new status.</param>
            <param name="error">The possible error message.</param>
            <param name="code">The possible error code.</param>
        </member>
        <member name="T:Solnet.Rpc.Core.Sockets.SubscriptionState">
            <summary>
            Represents the state of a given subscription.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Sockets.SubscriptionState._rpcClient">
            <summary>
            Streaming client reference for easy unsubscription.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Sockets.SubscriptionState.SubscriptionId">
            <summary>
            The subscription ID as confirmed by the node.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Sockets.SubscriptionState.Channel">
            <summary>
            The channel subscribed.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Sockets.SubscriptionState.State">
            <summary>
            The current state of the subscription.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Sockets.SubscriptionState.LastError">
            <summary>
            The last error message.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Sockets.SubscriptionState.LastCode">
            <summary>
            The last error code.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Core.Sockets.SubscriptionState.AdditionalParameters">
            <summary>
            The collection of parameters that were submitted for this subscription.
            </summary>
        </member>
        <member name="E:Solnet.Rpc.Core.Sockets.SubscriptionState.SubscriptionChanged">
            <summary>
            Event fired when the state of the subcription changes.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Core.Sockets.SubscriptionState.#ctor(Solnet.Rpc.SolanaStreamingRpcClient,Solnet.Rpc.Core.Sockets.SubscriptionChannel,System.Collections.Generic.IList{System.Object})">
            <summary>
            Base constructor.
            </summary>
            <param name="rpcClient">The streaming rpc client reference.</param>
            <param name="chan">The channel of this subscription.</param>
            <param name="aditionalParameters">Aditional parameters for this given subscription.</param>
        </member>
        <member name="M:Solnet.Rpc.Core.Sockets.SubscriptionState.ChangeState(Solnet.Rpc.Core.Sockets.SubscriptionStatus,System.String,System.String)">
            <summary>
            Changes the state of the subscription and invokes the event.
            </summary>
            <param name="newState">The new state of the subscription.</param>
            <param name="error">The possible error message.</param>
            <param name="code">The possible error code.</param>
        </member>
        <member name="M:Solnet.Rpc.Core.Sockets.SubscriptionState.HandleData(System.Object)">
            <summary>
            Invokes the data handler.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Solnet.Rpc.Core.Sockets.SubscriptionState.Unsubscribe">
            <summary>
            Unsubscribes the current subscription.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Core.Sockets.SubscriptionState.UnsubscribeAsync">
            <inheritdoc cref="M:Solnet.Rpc.Core.Sockets.SubscriptionState.Unsubscribe"/>
        </member>
        <member name="T:Solnet.Rpc.Core.Sockets.SubscriptionState`1">
            <summary>
            Represents the state of a given subscription with specified type handler.
            </summary>
            <typeparam name="T">The type of the data received by this subscription.</typeparam>
        </member>
        <member name="F:Solnet.Rpc.Core.Sockets.SubscriptionState`1.DataHandler">
            <summary>
            The data handler reference.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Core.Sockets.SubscriptionState`1.#ctor(Solnet.Rpc.SolanaStreamingRpcClient,Solnet.Rpc.Core.Sockets.SubscriptionChannel,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,`0},System.Collections.Generic.IList{System.Object})">
            <summary>
            Constructor with all parameters related to a given subscription.
            </summary>
            <param name="rpcClient">The streaming rpc client reference.</param>
            <param name="chan">The channel of this subscription.</param>
            <param name="handler">The handler for the data received.</param>
            <param name="aditionalParameters">Aditional parameters for this given subscription.</param>
        </member>
        <member name="M:Solnet.Rpc.Core.Sockets.SubscriptionState`1.HandleData(System.Object)">
            <inheritdoc cref="M:Solnet.Rpc.Core.Sockets.SubscriptionState.HandleData(System.Object)"/>
        </member>
        <member name="T:Solnet.Rpc.Core.Sockets.SubscriptionStatus">
            <summary>
            Represents the status of a subscription.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Sockets.SubscriptionStatus.WaitingResult">
            <summary>
            Waiting for the subscription message to be handled.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Sockets.SubscriptionStatus.Unsubscribed">
            <summary>
            The subscription was terminated.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Sockets.SubscriptionStatus.Subscribed">
            <summary>
            The subscription is still alive.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Core.Sockets.SubscriptionStatus.ErrorSubscribing">
            <summary>
            There was an error during subscription.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.IRpcClient">
            <summary>
            Specifies the methods to interact with the JSON RPC API.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.IRpcClient.NodeAddress">
            <summary>
            The address this client connects to.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetAccountInfoAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the account info using base64 encoding.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The account public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>A task which may return a request result holding the context and account info.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetAccountInfo(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the account info using base64 encoding.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The account public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBalanceAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the balance <b>asynchronously</b> for a certain public key.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>A task which may return a request result holding the context and address balance.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBalance(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the balance <b>synchronously</b> for a certain public key.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="pubKey">The public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBlockAsync(System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Returns identity and transaction information about a confirmed block in the ledger.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="slot">The slot.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBlock(System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Returns identity and transaction information about a confirmed block in the ledger.
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            </summary>
            <param name="slot">The slot.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBlockCommitmentAsync(System.UInt64)">
            <summary>
            Gets the block commitment of a certain block, identified by slot.
            </summary>
            <param name="slot">The slot.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBlockCommitment(System.UInt64)">
            <summary>
            Gets the block commitment of a certain block, identified by slot.
            </summary>
            <param name="slot">The slot.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBlockHeightAsync(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the current block height of the node.
            </summary>
            <param name="commitment">The commitment state to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBlockHeight(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the current block height of the node.
            </summary>
            <param name="commitment">The commitment state to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBlockProductionAsync(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},Solnet.Rpc.Types.Commitment)">
            <summary>
            Returns recent block production information from the current or previous epoch.
            <remarks>
            All the arguments are optional, but the lastSlot must be paired with a firstSlot argument.
            </remarks>
            </summary>
            <param name="identity">Filter production details only for this given validator.</param>
            <param name="firstSlot">The first slot to return production information (inclusive).</param>
            <param name="lastSlot">The last slot to return production information (inclusive and optional).</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBlockProduction(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},Solnet.Rpc.Types.Commitment)">
            <summary>
            Returns recent block production information from the current or previous epoch.
            </summary>
            <remarks>
            All the arguments are optional, but the lastSlot must be paired with a firstSlot argument.
            </remarks>
            <param name="identity">Filter production details only for this given validator.</param>
            <param name="firstSlot">The first slot to return production information (inclusive).</param>
            <param name="lastSlot">The last slot to return production information (inclusive and optional).</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBlocksAsync(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Returns a list of confirmed blocks between two slots.
            </summary>
            <param name="startSlot">The start slot (inclusive).</param>
            <param name="endSlot">The start slot (inclusive and optional).</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBlocks(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Returns a list of confirmed blocks between two slots.
            </summary>
            <param name="startSlot">The start slot (inclusive).</param>
            <param name="endSlot">The start slot (inclusive and optional).</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBlocksWithLimitAsync(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Returns a list of confirmed blocks starting at the given slot.
            </summary>
            <param name="startSlot">The start slot (inclusive).</param>
            <param name="limit">The max number of blocks to return.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBlocksWithLimit(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Returns a list of confirmed blocks starting at the given slot.
            </summary>
            <param name="startSlot">The start slot (inclusive).</param>
            <param name="limit">The max number of blocks to return.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBlockTimeAsync(System.UInt64)">
            <summary>
            Gets the estimated production time for a certain block, identified by slot.
            </summary>
            <param name="slot">The slot.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetBlockTime(System.UInt64)">
            <summary>
            Gets the estimated production time for a certain block, identified by slot.
            </summary>
            <param name="slot">The slot.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetClusterNodesAsync">
            <summary>
            Gets the cluster nodes.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetClusterNodes">
            <summary>
            Gets the cluster nodes.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetEpochInfoAsync(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets information about the current epoch.
            </summary>
            <param name="commitment">The commitment state to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetEpochInfo(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets information about the current epoch.
            </summary>
            <param name="commitment">The commitment state to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetEpochScheduleAsync">
            <summary>
            Gets epoch schedule information from this cluster's genesis config.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetEpochSchedule">
            <summary>
            Gets epoch schedule information from this cluster's genesis config.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetFeeCalculatorForBlockhashAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the fee calculator associated with the query blockhash, or null if the blockhash has expired.
            </summary>
            <param name="blockhash">The blockhash to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetFeeCalculatorForBlockhash(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the fee calculator associated with the query blockhash, or null if the blockhash has expired.
            </summary>
            <param name="blockhash">The blockhash to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetFeeRateGovernorAsync">
            <summary>
            Gets the fee rate governor information from the root bank.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetFeeRateGovernor">
            <summary>
            Gets the fee rate governor information from the root bank.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetFeesAsync(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets a recent block hash from the ledger, a fee schedule that can be used to compute the
            cost of submitting a transaction using it, and the last slot in which the blockhash will be valid.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetFees(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets a recent block hash from the ledger, a fee schedule that can be used to compute the
            cost of submitting a transaction using it, and the last slot in which the blockhash will be valid.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetFirstAvailableBlockAsync">
            <summary>
            Returns the slot of the lowest confirmed block that has not been purged from the ledger.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetFirstAvailableBlock">
            <summary>
            Returns the slot of the lowest confirmed block that has not been purged from the ledger.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetGenesisHashAsync">
            <summary>
            Gets the genesis hash of the ledger.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetGenesisHash">
            <summary>
            Gets the genesis hash of the ledger.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetHealthAsync">
            <summary>
            Returns the current health of the node. 
            This method should return the string 'ok' if the node is healthy, or the error code along with any information provided otherwise. 
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetHealth">
            <summary>
            Returns the current health of the node. 
            This method should return the string 'ok' if the node is healthy, or the error code along with any information provided otherwise. 
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetIdentityAsync">
            <summary>
            Gets the identity pubkey for the current node.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetIdentity">
            <summary>
            Gets the identity pubkey for the current node.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetInflationGovernorAsync(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the current inflation governor.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetInflationGovernor(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the current inflation governor.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetInflationRateAsync">
            <summary>
            Gets the specific inflation values for the current epoch.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetInflationRate">
            <summary>
            Gets the specific inflation values for the current epoch.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetInflationRewardAsync(System.Collections.Generic.IList{System.String},System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the inflation reward for a list of addresses for an epoch.
            </summary>
            <param name="addresses">The list of addresses to query, as base-58 encoded strings.</param>
            <param name="epoch">The epoch.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetInflationReward(System.Collections.Generic.IList{System.String},System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the inflation reward for a list of addresses for an epoch.
            </summary>
            <param name="addresses">The list of addresses to query, as base-58 encoded strings.</param>
            <param name="epoch">The epoch.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetLargestAccountsAsync(System.Nullable{Solnet.Rpc.Types.AccountFilterType},Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the 20 largest accounts, by lamport balance.
            </summary>
            <remarks>Results may be cached up to two hours.</remarks>
            <param name="filter">Filter results by account type.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetLargestAccounts(System.Nullable{Solnet.Rpc.Types.AccountFilterType},Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the 20 largest accounts, by lamport balance.
            </summary>
            <remarks>Results may be cached up to two hours.</remarks>
            <param name="filter">Filter results by account type.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetLeaderScheduleAsync(System.UInt64,System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Returns the leader schedule for an epoch.
            </summary>
            <param name="slot">Fetch the leader schedule for the epoch that corresponds to the provided slot. 
            If unspecified, the leader schedule for the current epoch is fetched.</param>
            <param name="identity">Filter results for this validator only (base 58 encoded string and optional).</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetLeaderSchedule(System.UInt64,System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Returns the leader schedule for an epoch.
            </summary>
            <param name="slot">Fetch the leader schedule for the epoch that corresponds to the provided slot. 
            If unspecified, the leader schedule for the current epoch is fetched.</param>
            <param name="identity">Filter results for this validator only (base 58 encoded string and optional).</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetMaxRetransmitSlotAsync">
            <summary>
            Gets the maximum slot seen from retransmit stage.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetMaxRetransmitSlot">
            <summary>
            Gets the maximum slot seen from retransmit stage.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetMaxShredInsertSlotAsync">
            <summary>
            Gets the maximum slot seen from after shred insert.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetMaxShredInsertSlot">
            <summary>
            Gets the maximum slot seen from after shred insert.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetMinimumBalanceForRentExemptionAsync(System.Int64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the minimum balance required to make account rent exempt.
            </summary>
            <param name="accountDataSize">The account data size.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetMinimumBalanceForRentExemption(System.Int64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the minimum balance required to make account rent exempt.
            </summary>
            <param name="accountDataSize">The account data size.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetMinimumLedgerSlotAsync">
            <summary>
            Gets the lowest slot that the node has information about in its ledger.
            <remarks>
            This value may decrease over time if a node is configured to purging data.
            </remarks>
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetMinimumLedgerSlot">
            <summary>
            Gets the lowest slot that the node has information about in its ledger.
            <remarks>
            This value may decrease over time if a node is configured to purging data.
            </remarks>
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetMultipleAccountsAsync(System.Collections.Generic.IList{System.String},Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the account info for multiple accounts.
            </summary>
            <param name="accounts">The list of the accounts public keys.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>A task which may return a request result holding the context and account info.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetMultipleAccounts(System.Collections.Generic.IList{System.String},Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the account info for multiple accounts.
            </summary>
            <param name="accounts">The list of the accounts public keys.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetProgramAccountsAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Returns all accounts owned by the provided program Pubkey.
            </summary>
            <param name="pubKey">The program public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>A task which may return a request result holding the context and account info.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetProgramAccounts(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Returns all accounts owned by the provided program Pubkey.
            </summary>
            <param name="pubKey">The program public key.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetRecentBlockHashAsync(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets a recent block hash.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetRecentBlockHash(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets a recent block hash.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetRecentPerformanceSamplesAsync(System.UInt64)">
            <summary>
            Gets a list of recent performance samples.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="limit">Maximum transaction signatures to return, between 1-720. Default is 720.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetRecentPerformanceSamples(System.UInt64)">
            <summary>
            Gets a list of recent performance samples.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="limit">Maximum transaction signatures to return, between 1-720. Default is 720.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetSignaturesForAddressAsync(System.String,System.UInt64,System.String,System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets confirmed signatures for transactions involving the address.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="accountPubKey">The account address as base-58 encoded string.</param>
            <param name="limit">Maximum transaction signatures to return, between 1-1000. Default is 1000.</param>
            <param name="before">Start searching backwards from this transaction signature.</param>
            <param name="until">Search until this transaction signature, if found before limit is reached.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetSignaturesForAddress(System.String,System.UInt64,System.String,System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets confirmed signatures for transactions involving the address.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="accountPubKey">The account address as base-58 encoded string.</param>
            <param name="limit">Maximum transaction signatures to return, between 1-1000. Default is 1000.</param>
            <param name="before">Start searching backwards from this transaction signature.</param>
            <param name="until">Search until this transaction signature, if found before limit is reached.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetSignatureStatusesAsync(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Gets the status of a list of signatures.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="transactionHashes">The list of transactions to search status info for.</param>
            <param name="searchTransactionHistory">If the node should search for signatures in it's ledger cache.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetSignatureStatuses(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Gets the status of a list of signatures.
            <remarks>
            Unless <c>searchTransactionHistory</c> is included, this method only searches the recent status cache of signatures.
            </remarks>
            </summary>
            <param name="transactionHashes">The list of transactions to search status info for.</param>
            <param name="searchTransactionHistory">If the node should search for signatures in it's ledger cache.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetSlotAsync(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the current slot the node is processing
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetSlot(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the current slot the node is processing
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetSlotLeaderAsync(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the current slot leader.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetSlotLeader(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the current slot leader.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetSlotLeadersAsync(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the slot leaders for a given slot range.
            </summary>
            <param name="start">The start slot.</param>
            <param name="limit">The result limit.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetSlotLeaders(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the slot leaders for a given slot range.
            </summary>
            <param name="start">The start slot.</param>
            <param name="limit">The result limit.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetSnapshotSlotAsync">
            <summary>
            Gets the highest slot that the node has a snapshot for.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetSnapshotSlot">
            <summary>
            Gets the highest slot that the node has a snapshot for.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetStakeActivationAsync(System.String,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the epoch activation information for a stake account.
            </summary>
            <param name="publicKey">Public key of account to query, as base-58 encoded string</param>
            <param name="epoch">Epoch for which to calculate activation details.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetStakeActivation(System.String,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the epoch activation information for a stake account.
            </summary>
            <param name="publicKey">Public key of account to query, as base-58 encoded string</param>
            <param name="epoch">Epoch for which to calculate activation details.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetSupplyAsync(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets information about the current supply.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetSupply(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets information about the current supply.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetTokenAccountBalanceAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the token balance of an SPL Token account.
            </summary>
            <param name="splTokenAccountPublicKey">Public key of Token account to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetTokenAccountBalance(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the token balance of an SPL Token account.
            </summary>
            <param name="splTokenAccountPublicKey">Public key of Token account to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetTokenAccountsByDelegateAsync(System.String,System.String,System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets all SPL Token accounts by approved delegate.
            </summary>
            <param name="ownerPubKey">Public key of account owner query, as base-58 encoded string.</param>
            <param name="tokenMintPubKey">Public key of the specific token Mint to limit accounts to, as base-58 encoded string.</param>
            <param name="tokenProgramId">Public key of the Token program ID that owns the accounts, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetTokenAccountsByDelegate(System.String,System.String,System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets all SPL Token accounts by approved delegate.
            </summary>
            <param name="ownerPubKey">Public key of account owner query, as base-58 encoded string.</param>
            <param name="tokenMintPubKey">Public key of the specific token Mint to limit accounts to, as base-58 encoded string.</param>
            <param name="tokenProgramId">Public key of the Token program ID that owns the accounts, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetTokenAccountsByOwnerAsync(System.String,System.String,System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets all SPL Token accounts by token owner.
            </summary>
            <param name="ownerPubKey">Public key of account owner query, as base-58 encoded string.</param>
            <param name="tokenMintPubKey">Public key of the specific token Mint to limit accounts to, as base-58 encoded string.</param>
            <param name="tokenProgramId">Public key of the Token program ID that owns the accounts, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetTokenAccountsByOwner(System.String,System.String,System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets all SPL Token accounts by token owner.
            </summary>
            <param name="ownerPubKey">Public key of account owner query, as base-58 encoded string.</param>
            <param name="tokenMintPubKey">Public key of the specific token Mint to limit accounts to, as base-58 encoded string.</param>
            <param name="tokenProgramId">Public key of the Token program ID that owns the accounts, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetTokenLargestAccountsAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the 20 largest token accounts of a particular SPL Token.
            </summary>
            <param name="tokenMintPubKey">Public key of Token Mint to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetTokenLargestAccounts(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the 20 largest token accounts of a particular SPL Token.
            </summary>
            <param name="tokenMintPubKey">Public key of Token Mint to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetTokenSupplyAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Get the token supply of an SPL Token type.
            </summary>
            <param name="tokenMintPubKey">Public key of Token Mint to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetTokenSupply(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Get the token supply of an SPL Token type.
            </summary>
            <param name="tokenMintPubKey">Public key of Token Mint to query, as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetTransactionAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Returns transaction details for a confirmed transaction.
            </summary>
            <param name="signature">ransaction signature as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetTransaction(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Returns transaction details for a confirmed transaction.
            </summary>
            <param name="signature">Transaction signature as base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetTransactionCountAsync(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the total transaction count of the ledger.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetTransactionCount(Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the total transaction count of the ledger.
            </summary>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetVersionAsync">
            <summary>
            Gets the current node's software version info.
            </summary>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetVersion">
            <summary>
            Gets the current node's software version info.
            </summary>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetVoteAccountsAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the account info and associated stake for all voting accounts in the current bank.
            </summary>
            <param name="votePubKey">Filter by validator vote address, base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.GetVoteAccounts(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the account info and associated stake for all voting accounts in the current bank.
            </summary>
            <param name="votePubKey">Filter by validator vote address, base-58 encoded string.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.RequestAirdropAsync(System.String,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Requests an airdrop to the passed <c>pubKey</c> of the passed <c>lamports</c> amount.
            <remarks>
            The <c>commitment</c> parameter is optional, the default <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is used.
            </remarks>
            </summary>
            <param name="pubKey">The public key of to receive the airdrop.</param>
            <param name="lamports">The amount of lamports to request.</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.RequestAirdrop(System.String,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Requests an airdrop to the passed <c>pubKey</c> of the passed <c>lamports</c> amount.
            <remarks>
            The <c>commitment</c> parameter is optional, the default <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is used.
            </remarks>
            </summary>
            <param name="pubKey">The public key of to receive the airdrop.</param>
            <param name="lamports">The amount of lamports to request.</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.SendTransactionAsync(System.String,System.Boolean,Solnet.Rpc.Types.Commitment)">
            <summary>
            Sends a transaction.
            </summary>
            <param name="transaction">The signed transaction as base-64 encoded string.</param>
            <param name="skipPreflight">If true skip the prflight transaction checks (default false).</param>
            <param name="preFlightCommitment">The block commitment used for preflight.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.SendTransaction(System.String,System.Boolean,Solnet.Rpc.Types.Commitment)">
            <summary>
            Sends a transaction.
            </summary>
            <param name="transaction">The signed transaction as base-64 encoded string.</param>
            <param name="skipPreflight">If true skip the prflight transaction checks (default false).</param>
            <param name="preFlightCommitment">The block commitment used for preflight.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.SendTransactionAsync(System.Byte[],System.Boolean,Solnet.Rpc.Types.Commitment)">
            <summary>
            Sends a transaction.
            </summary>
            <param name="transaction">The signed transaction as byte array.</param>
            <param name="skipPreflight">If true skip the prflight transaction checks (default false).</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.SendTransaction(System.Byte[],System.Boolean,Solnet.Rpc.Types.Commitment)">
            <summary>
            Sends a transaction.
            </summary>
            <param name="transaction">The signed transaction as byte array.</param>
            <param name="skipPreflight">If true skip the prflight transaction checks (default false).</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.SimulateTransactionAsync(System.String,System.Boolean,Solnet.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>
            Simulate sending a transaction.
            </summary>
            <param name="transaction">The signed transaction as a base-64 encoded string.</param>
            <param name="sigVerify">If the transaction signatures should be verified 
            (default false, conflicts with <c>replaceRecentBlockHash</c>.</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <param name="replaceRecentBlockhash">If the transaction recent blockhash should be replaced with the most recent blockhash 
            (default false, conflicts with <c>sigVerify</c></param>
            <param name="accountsToReturn">List of accounts to return, as base-58 encoded strings.</param>
            <returns>Returns a task that holds the asynchronous operation result and state.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.SimulateTransaction(System.String,System.Boolean,Solnet.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>
            Simulate sending a transaction.
            </summary>
            <param name="transaction">The signed transaction base-64 encoded string.</param>
            <param name="sigVerify">If the transaction signatures should be verified 
            (default false, conflicts with <c>replaceRecentBlockHash</c>.</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <param name="replaceRecentBlockhash">If the transaction recent blockhash should be replaced with the most recent blockhash 
            (default false, conflicts with <c>sigVerify</c></param>
            <param name="accountsToReturn">List of accounts to return, as base-58 encoded strings.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.SimulateTransactionAsync(System.Byte[],System.Boolean,Solnet.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>
            Simulate sending a transaction.
            </summary>
            <param name="transaction">The signed transaction as a byte array.</param>
            <param name="sigVerify">If the transaction signatures should be verified 
            (default false, conflicts with <c>replaceRecentBlockHash</c>.</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <param name="replaceRecentBlockhash">If the transaction recent blockhash should be replaced with the most recent blockhash 
            (default false, conflicts with <c>sigVerify</c></param>
            <param name="accountsToReturn">List of accounts to return, as base-58 encoded strings.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="M:Solnet.Rpc.IRpcClient.SimulateTransaction(System.Byte[],System.Boolean,Solnet.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <summary>
            Simulate sending a transaction.
            </summary>
            <param name="transaction">The signed transaction as a byte array.</param>
            <param name="sigVerify">If the transaction signatures should be verified 
            (default false, conflicts with <c>replaceRecentBlockHash</c>.</param>
            <param name="commitment">The block commitment used to retrieve block hashes and verify success.</param>
            <param name="replaceRecentBlockhash">If the transaction recent blockhash should be replaced with the most recent blockhash 
            (default false, conflicts with <c>sigVerify</c></param>
            <param name="accountsToReturn">List of accounts to return, as base-58 encoded strings.</param>
            <returns>Returns an object that wraps the result along with possible errors with the request.</returns>
        </member>
        <member name="T:Solnet.Rpc.IStreamingRpcClient">
            <summary>
            Represents the streaming RPC client for the solana API.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.IStreamingRpcClient.NodeAddress">
            <summary>
            The address this client connects to.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.SubscribeAccountInfoAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo}},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribes asynchronously to AccountInfo notifications.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="pubkey">The public key of the account.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.SubscribeAccountInfo(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo}},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribes to the AccountInfo. This is a synchronous and blocking function.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="pubkey">The public key of the account.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.SubscribeLogInfoAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.LogInfo}},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribes asynchronously to the logs notifications that mention a given public key.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="pubkey">The public key to filter by mention.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.SubscribeLogInfoAsync(Solnet.Rpc.Types.LogsSubscriptionType,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.LogInfo}},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribes asynchronously to the logs notifications.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="subscriptionType">The filter mechanism.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.SubscribeLogInfo(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.LogInfo}},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribes to the logs notifications that mention a given public key. This is a synchronous and blocking function.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="pubkey">The public key to filter by mention.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.SubscribeLogInfo(Solnet.Rpc.Types.LogsSubscriptionType,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.LogInfo}},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribes to the logs notifications. This is a synchronous and blocking function.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="subscriptionType">The filter mechanism.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.SubscribeSignatureAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.ErrorResult}},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribes asynchronously to a transaction signature to receive notification when the transaction is confirmed.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="transactionSignature">The transaction signature.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.SubscribeSignature(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.ErrorResult}},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribes to a transaction signature to receive notification when the transaction is confirmed. This is a synchronous and blocking function.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="transactionSignature">The transaction signature.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.SubscribeProgramAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountKeyPair}},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribes asynchronously to changes to a given program account data.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="programPubkey">The program pubkey.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.SubscribeProgram(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountKeyPair}},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribes to changes to a given program account data. This is a synchronous and blocking function.
            </summary>
            <remarks>
            The <c>commitment</c> parameter is optional, the default value <see cref="F:Solnet.Rpc.Types.Commitment.Finalized"/> is not sent.
            </remarks>
            <param name="programPubkey">The program pubkey.</param>
            <param name="callback">The callback to handle data notifications.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.SubscribeSlotInfoAsync(System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Models.SlotInfo})">
            <summary>
            Subscribes asynchronously to receive notifications anytime a slot is processed by the validator.
            </summary>
            <param name="callback">The callback to handle data notifications.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.SubscribeSlotInfo(System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Models.SlotInfo})">
            <summary>
            Subscribes to receive notifications anytime a slot is processed by the validator. This is a synchronous and blocking function.
            </summary>
            <param name="callback">The callback to handle data notifications.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.SubscribeRootAsync(System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,System.Int32})">
            <summary>
            Subscribes asynchronously to receive notifications anytime a new root is set by the validator.
            </summary>
            <param name="callback">The callback to handle data notifications.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.SubscribeRoot(System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,System.Int32})">
            <summary>
            Subscribes to receive notifications anytime a new root is set by the validator. This is a synchronous and blocking function.
            </summary>
            <param name="callback">The callback to handle data notifications.</param>
            <returns>Returns an object representing the state of the subscription.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.UnsubscribeAsync(Solnet.Rpc.Core.Sockets.SubscriptionState)">
            <summary>
            Asynchronously unsubscribes from a given subscription using the state object.
            </summary>
            <param name="subscription">The subscription state object.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.Unsubscribe(Solnet.Rpc.Core.Sockets.SubscriptionState)">
            <summary>
            Unsubscribes from a given subscription using the state object. This is a synchronous and blocking function.
            </summary>
            <param name="subscription">The subscription state object.</param>
        </member>
        <member name="M:Solnet.Rpc.IStreamingRpcClient.Init">
            <summary>
            Asynchronously initializes the client connection asynchronously.
            </summary>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Solnet.Rpc.Messages.JsonRpcBase">
            <summary>
            Base JpnRpc message.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Messages.JsonRpcBase.Jsonrpc">
            <summary>
            The rpc version.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Messages.JsonRpcBase.Id">
            <summary>
            The id of the message.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Messages.JsonRpcRequest">
            <summary>
            Rpc request message.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Messages.JsonRpcRequest.Method">
            <summary>
            The request method.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Messages.JsonRpcRequest.Params">
            <summary>
            The method parameters list.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Messages.JsonRpcResponse`1">
            <summary>
            Holds a rpc request response.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="P:Solnet.Rpc.Messages.JsonRpcResponse`1.Result">
            <summary>
            The result of a given request.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Messages.JsonRpcErrorResponse">
            <summary>
            Error message from a given request.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Messages.JsonRpcErrorResponse.Error">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Messages.ErrorContent">
            <summary>
            Holds the contents of an error message.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Messages.ErrorContent.Code">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Messages.ErrorContent.Message">
            <summary>
            The string error message.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Messages.ErrorContent.Data">
            <summary>
            Possible extension data as a dictionary.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Messages.ContextObj">
            <summary>
            Context objects, holds the slot.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Messages.ContextObj.Slot">
            <summary>
            The slot.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Messages.ResponseValue`1">
            <summary>
            Contains the pair Context + Value from a given request.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Solnet.Rpc.Messages.ResponseValue`1.Context">
            <summary>
            The context object from a given request.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Messages.ResponseValue`1.Value">
            <summary>
            The value object from a given request.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Messages.JsonRpcStreamResponse`1">
            <summary>
            Holds a json rpc message from a streaming socket.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="P:Solnet.Rpc.Messages.JsonRpcStreamResponse`1.Result">
            <summary>
            The message received.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Messages.JsonRpcStreamResponse`1.Subscription">
            <summary>
            The subscription id that the message belongs to.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TokenAccountInfo">
            <summary>
            Represents the account info for a given token account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenAccountInfo.Data">
            <summary>
            The parsed token account data field.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TokenAccountInfoDetails">
            <summary>
            Represents the details of the info field of a token account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenAccountInfoDetails.TokenAmount">
            <summary>
            The token balance data.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenAccountInfoDetails.Delegate">
            <summary>
            A base-58 encoded public key of the delegate.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenAccountInfoDetails.DelegatedAmount">
            <summary>
            The delegated amount of tokens.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenAccountInfoDetails.State">
            <summary>
            The account's state.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenAccountInfoDetails.IsNative">
            <summary>
            If the account is a native token account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenAccountInfoDetails.Mint">
            <summary>
            A base-58 encoded public key of the token's mint.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenAccountInfoDetails.Owner">
            <summary>
            A base-58 encoded public key of the program this account as been assigned to.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.ParsedTokenAccountData">
            <summary>
            Represents the parsed account data, as available by the program-specific state parser.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.ParsedTokenAccountData.Type">
            <summary>
            The type of account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.ParsedTokenAccountData.Info">
            <summary>
            The token account info, containing account balances, delegation and ownership info.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TokenAccountData">
            <summary>
            Represents a token account's data.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenAccountData.Program">
            <summary>
            The program responsible for the account data.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenAccountData.Parsed">
            <summary>
            The parsed account data, as available by the program-specific state parser.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.LargeTokenAccount">
            <summary>
            Represents a large token account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.LargeTokenAccount.Address">
            <summary>
            The address of the token account.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.LargeAccount">
            <summary>
            Represents a large account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.LargeAccount.Lamports">
            <summary>
            The lamports balance of the account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.LargeAccount.Address">
            <summary>
            The address of the token account.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TokenBalance">
            <summary>
            Represents the token balance of an account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenBalance.Amount">
            <summary>
            The raw token account balance without decimals.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenBalance.Decimals">
            <summary>
            The number of base 10 digits to the right of the decimal place.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenBalance.UiAmount">
            <summary>
            The token account balance, using mint-prescribed decimals. DEPRECATED.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenBalance.UiAmountString">
            <summary>
            The token account balance as a string, using mint-prescribed decimals.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.AccountInfoBase">
            <summary>
            The base class of the account info, to be subclassed for token a account info classes.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.AccountInfoBase.Lamports">
            <summary>
            The lamports balance of the account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.AccountInfoBase.Owner">
            <summary>
            The account owner.
            <remarks>
            This value could be another regular address or a program.
            </remarks>
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.AccountInfoBase.Executable">
            <summary>
            Indicates whether the account contains a program (and is strictly read-only).
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.AccountInfoBase.RentEpoch">
            <summary>
            The epoch at which the account will next owe rent.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.AccountInfo">
            <summary>
            Represents the account info.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.AccountInfo.Data">
            <summary>
            The actual account data.
            <remarks>
            This field should contain two values: first value is the data, the second one is the encoding - should always read base64.
            </remarks>
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.AccountKeyPair">
            <summary>
            Represents the tuple account key and account data.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.AccountKeyPair.Account">
            <summary>
            The account info.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.AccountKeyPair.PublicKey">
            <summary>
            A base-58 encoded public key representing the account's public key.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.AccountKeysList">
            <summary>
            A wrapper around a dictionary of key-value pairs of public-keys - account metas to be used
            during transaction building. It checks for differences in account meta when adding to the dictionary
            and sorts the underlying list of values in the dictionary according to <see cref="M:Solnet.Rpc.Models.AccountMeta.CompareTo(Solnet.Rpc.Models.AccountMeta)"/>
            so they are ordered and compatible with Solana's transaction anatomy.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.AccountKeysList._accounts">
            <summary>
            The dictionary with key-value pairs of public keys - account metas.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.AccountKeysList.AccountList">
            <summary>
            Get the values of the accounts dictionary as a list.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Models.AccountKeysList.#ctor">
            <summary>
            Initialize the account keys list for use within transaction building.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Models.AccountKeysList.Add(Solnet.Rpc.Models.AccountMeta)">
            <summary>
            Add a list of account metas to the dictionary with key-value pairs of public keys - account metas.
            </summary>
            <param name="accountMeta">The account meta to add.</param>
            <exception cref="T:System.Exception">Throws exception when account meta is already present and couldn't overwrite.</exception>
        </member>
        <member name="M:Solnet.Rpc.Models.AccountKeysList.Add(System.Collections.Generic.IEnumerable{Solnet.Rpc.Models.AccountMeta})">
            <summary>
            Add a list of account metas to the dictionary with key-value pairs of public keys - account metas.
            </summary>
            <param name="accountMetas">The account meta to add.</param>
        </member>
        <member name="T:Solnet.Rpc.Models.AccountMeta">
            <summary>
            Implements the account meta logic, which defines if an account represented by public key is a signer, a writable account or both.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.AccountMeta.PublicKeyBytes">
            <summary>
            The public key as a byte array.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.AccountMeta.PublicKey">
            <summary>
            Get the public key encoded as base58.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.AccountMeta.Signer">
            <summary>
            A boolean which defines if the account is a signer account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.AccountMeta.Writable">
            <summary>
            A boolean which defines if the account is a writable account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.AccountMeta.Account">
            <summary>
            The account.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Models.AccountMeta.#ctor(Solnet.Wallet.Account,System.Boolean)">
            <summary>
            Initialize the account meta with the passed account, being a signing account for the transaction.
            </summary>
            <param name="account">The account.</param>
            <param name="isWritable">If the account is writable.</param>
        </member>
        <member name="M:Solnet.Rpc.Models.AccountMeta.#ctor(Solnet.Wallet.PublicKey,System.Boolean)">
            <summary>
            Initialize the account meta with the passed public key, being a non-signing account for the transaction.
            </summary>
            <param name="publicKey">The public key.</param>
            <param name="isWritable">If the account is writable.</param>
        </member>
        <member name="M:Solnet.Rpc.Models.AccountMeta.CompareTo(Solnet.Rpc.Models.AccountMeta)">
            <summary>
            Compares the account meta instance with another account meta.
            </summary>
            <param name="other">The object to compare the base to.</param>
            <returns>
            Returns 0 if the objects are equal in terms of Signing and Writing,
            -1 if the base of the comparison is something the other is not, otherwise 1.
            </returns>
            <exception cref="T:System.NotImplementedException">Thrown when the object to compare with is null.</exception>
        </member>
        <member name="T:Solnet.Rpc.Models.BlockInfo">
            <summary>
            Represents the block info.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.BlockInfo.BlockTime">
            <summary>
            Estimated block production time.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.BlockInfo.Blockhash">
            <summary>
            A base-58 encoded public key representing the block hash.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.BlockInfo.PreviousBlockhash">
            <summary>
            A base-58 encoded public key representing the block hash of this block's parent.
            <remarks>
            If the parent block is no longer available due to ledger cleanup, this field will return
            '11111111111111111111111111111111'
            </remarks>
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.BlockInfo.ParentSlot">
            <summary>
            The slot index of this block's parent.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.BlockInfo.BlockHeight">
            <summary>
            The number of blocks beneath this block.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.BlockInfo.Rewards">
            <summary>
            The rewards for this given block.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.BlockInfo.Transactions">
            <summary>
            Collection of transactions and their metadata within this block.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TransactionMetaSlotInfo">
            <summary>
            Represents the transaction, metadata and its containing slot.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionMetaSlotInfo.Slot">
            <summary>
            The slot this transaction was processed in.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionMetaSlotInfo.BlockTime">
            <summary>
            Estimated block production time.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TransactionMetaInfo">
            <summary>
            Represents the tuple transaction and metadata.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionMetaInfo.Transaction">
            <summary>
            The transaction information.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionMetaInfo.Meta">
            <summary>
            The metadata information.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.RewardInfo">
            <summary>
            Represents the reward information related to a given account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.RewardInfo.Pubkey">
            <summary>
            The account pubkey as base58 encoded string.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.RewardInfo.Lamports">
            <summary>
            Number of reward lamports credited or debited by the account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.RewardInfo.PostBalance">
            <summary>
            Account balance in lamports after the reward was applied.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.RewardInfo.RewardType">
            <summary>
            Type of the reward.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.RewardType">
            <summary>
            The type of the reward.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.RewardType.Unknown">
            <summary>
            Default value in case the returned value is undefined.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.RewardType.Fee">
            <summary>
            Fee reward.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.RewardType.Rent">
            <summary>
            Rent reward.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.RewardType.Voting">
            <summary>
            Voting reward.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.RewardType.Staking">
            <summary>
            Staking reward.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TransactionInfo">
            <summary>
            Represents a transaction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionInfo.Signatures">
            <summary>
            The signatures of this transaction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionInfo.Message">
            <summary>
            The message contents of the transaction.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TransactionContentInfo">
            <summary>
            Represents the contents of the trasaction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionContentInfo.AccountKeys">
            <summary>
            List of base-58 encoded public keys used by the transaction, including by the instructions and for signatures.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionContentInfo.Header">
            <summary>
            Details the account types and signatures required by the transaction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionContentInfo.RecentBlockhash">
            <summary>
             A base-58 encoded hash of a recent block in the ledger used to prevent transaction duplication and to give transactions lifetimes.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionContentInfo.Instructions">
            <summary>
            List of program instructions that will be executed in sequence and committed in one atomic transaction if all succeed.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TransactionHeaderInfo">
            <summary>
            Details the number and type of accounts and signatures in a given transaction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionHeaderInfo.NumRequiredSignatures">
            <summary>
            The total number of signatures required to make the transaction valid. 
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionHeaderInfo.NumReadonlySignedAccounts">
            <summary>
            The last NumReadonlySignedAccounts of the signed keys are read-only accounts.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionHeaderInfo.NumReadonlyUnsignedAccounts">
            <summary>
            The last NumReadonlyUnsignedAccounts of the unsigned keys are read-only accounts.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TransactionMeta">
            <summary>
            Represents the transaction metadata.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionMeta.Error">
            <summary>
            Possible transaction error.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionMeta.Fee">
            <summary>
            Fee this transaction was charged.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionMeta.PreBalances">
            <summary>
            Collection of account balances from before the transaction was processed.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionMeta.PostBalances">
            <summary>
            Collection of account balances after the transaction was processed.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionMeta.InnerInstructions">
            <summary>
            List of inner instructions or omitted if inner instruction recording was not yet enabled during this transaction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionMeta.PreTokenBalances">
            <summary>
            List of token balances from before the transaction was processed or omitted if token balance recording was not yet enabled during this transaction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionMeta.PostTokenBalances">
            <summary>
            List of token balances from after the transaction was processed or omitted if token balance recording was not yet enabled during this transaction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionMeta.LogMessages">
            <summary>
            Array of string log messages or omitted if log message recording was not yet enabled during this transaction.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TokenBalanceInfo">
            <summary>
            Represents the structure of a token balance metadata for a transaction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenBalanceInfo.AccountIndex">
            <summary>
            Index of the account in which the token balance is provided for.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenBalanceInfo.Mint">
            <summary>
            Pubkey of the token's mint.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenBalanceInfo.UiTokenAmount">
            <summary>
            Token balance details.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.InnerInstruction">
            <summary>
            Represents an inner instruction. Inner instruction are cross-program instructions that are invoked during transaction processing.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InnerInstruction.Index">
            <summary>
            Index of the transaction instruction from which the inner instruction(s) originated
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InnerInstruction.Instructions">
            <summary>
            List of program instructions that will be executed in sequence and committed in one atomic transaction if all succeed.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.InstructionInfo">
            <summary>
            Represents the data of given instruction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InstructionInfo.ProgramIdIndex">
            <summary>
            Index into the <i>Message.AccountKeys</i> array indicating the program account that executes this instruction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InstructionInfo.Accounts">
            <summary>
            List of ordered indices into the <i>Message.AccountKeys</i> array indicating which accounts to pass to the program.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InstructionInfo.Data">
            <summary>
            The program input data encoded in a base-58 string.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.BlockCommitment">
            <summary>
            Represents the block commitment info.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.BlockCommitment.Commitment">
            <summary>
            A list of values representing the amount of cluster stake in lamports that has
            voted onn the block at each depth from 0 to (max lockout history + 1).
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.BlockCommitment.TotalStake">
            <summary>
            Total active stake, in lamports, of the current epoch.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.FeeCalculator">
            <summary>
            Represents the fee calculator info.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.FeeCalculator.LamportsPerSignature">
            <summary>
            The amount, in lamports, to be paid per signature.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.FeeCalculatorInfo">
            <summary>
            Represents the fee calculator info.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.FeeCalculatorInfo.FeeCalculator">
            <summary>
            The fee calculator info.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.BlockHash">
            <summary>
            Represents block hash info.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.BlockHash.Blockhash">
            <summary>
            A base-58 encoded public key representing the block hash.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.BlockHash.FeeCalculator">
            <summary>
            The fee calculator data.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.BlockProductionInfo">
            <summary>
            Holds the block production information.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.BlockProductionInfo.ByIdentity">
            <summary>
            The block production as a map from the validator to a list 
            of the number of leader slots and number of blocks produced
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.BlockProductionInfo.Range">
            <summary>
            The block production range by slots.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.SlotRange">
            <summary>
            Represents a slot range.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SlotRange.FirstSlot">
            <summary>
            The first slot of the range (inclusive).
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SlotRange.LastSlot">
            <summary>
            The last slot of the range (inclusive).
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.ClusterNode">
            <summary>
            Represents a node in the cluster.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.ClusterNode.Gossip">
            <summary>
            Gossip network address for the node.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.ClusterNode.PublicKey">
            <summary>
            A base-58 encoded public key associated with the node.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.ClusterNode.Rpc">
            <summary>
            JSON RPC network address for the node. The service may not be enabled.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.ClusterNode.Tpu">
            <summary>
            TPU network address for the node.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.ClusterNode.Version">
            <summary>
            The software version of the node. The information may not be available.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.ClusterNode.FeatureSet">
            <summary>
            Unique identifier of the current software's feature set.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.ClusterNode.ShredVersion">
            <summary>
            The shred version the node has been configured to use.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.EpochInfo">
            <summary>
            Represents information about the current epoch.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.EpochInfo.AbsoluteSlot">
            <summary>
            The current slot.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.EpochInfo.BlockHeight">
            <summary>
            The current block height.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.EpochInfo.Epoch">
            <summary>
            The current epoch.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.EpochInfo.SlotIndex">
            <summary>
            The current slot relative to the start of the current epoch.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.EpochInfo.SlotsInEpoch">
            <summary>
            The number of slots in this epoch
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.EpochScheduleInfo">
            <summary>
            Represents information about the epoch schedule.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.EpochScheduleInfo.SlotsPerEpoch">
            <summary>
            The maximum number of slots in each epoch.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.EpochScheduleInfo.LeaderScheduleSlotOffset">
            <summary>
            The number of slots before beginning of an epoch to calculate a leader schedule for that epoch.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.EpochScheduleInfo.FirstNormalEpoch">
            <summary>
            The first normal-length epoch.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.EpochScheduleInfo.FirstNormalSlot">
            <summary>
            The first normal-length slot.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.EpochScheduleInfo.Warmup">
            <summary>
            Whether epochs start short and grow.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.ErrorResult">
            <summary>
            Holds an error result.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.ErrorResult.Error">
            <summary>
            The error string.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.FeeRateGovernor">
            <summary>
            Represents the fee rate governor.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.FeeRateGovernor.BurnPercent">
            <summary>
            Percentage of fees collected to be destroyed.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.FeeRateGovernor.MaxLamportsPerSignature">
            <summary>
            Highest value LamportsPerSignature can attain for the next slot.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.FeeRateGovernor.MinLamportsPerSignature">
            <summary>
            Smallest value LamportsPerSignature can attain for the next slot.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.FeeRateGovernor.TargetLamportsPerSignature">
            <summary>
            Desired fee rate for the cluster.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.FeeRateGovernor.TargetSignaturesPerSlot">
            <summary>
            Desired signature rate for the cluster.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.FeeRateGovernorInfo">
            <summary>
            Represents the fee rate governor info.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.FeeRateGovernorInfo.FeeRateGovernor">
            <summary>
            The fee rate governor.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.FeesInfo">
            <summary>
            Represents information about the fees.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.FeesInfo.Blockhash">
            <summary>
            A block hash as base-58 encoded string.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.FeesInfo.FeeCalculator">
            <summary>
            The fee calculator for this block hash.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.FeesInfo.LastValidSlot">
            <summary>
            DEPRECATED - this value is inaccurate and should not be relied upon
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.FeesInfo.LastValidBlockHeight">
            <summary>
            Last block height at which a blockhash will be valid.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.NodeIdentity">
            <summary>
            Represents the identity public key for the current node.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.NodeIdentity.Identity">
            <summary>
            The identity public key of the current node, as base-58 encoded string.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.InflationGovernor">
            <summary>
            Represents inflation governor information.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InflationGovernor.Initial">
            <summary>
            The initial inflation percentage from time zero.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InflationGovernor.Terminal">
            <summary>
            The terminal inflation percentage.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InflationGovernor.Taper">
            <summary>
            The rate per year at which inflation is lowered.
            <remarks>Rate reduction is derived using the target slot time as per genesis config.</remarks>
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InflationGovernor.Foundation">
            <summary>
            Percentage of total inflation allocated to the foundation.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InflationGovernor.FoundationTerm">
            <summary>
            Duration of foundation pool inflation in years.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.InflationRate">
            <summary>
            Represents the inflation rate information.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InflationRate.Epoch">
            <summary>
            Epoch for which these values are valid.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InflationRate.Foundation">
            <summary>
            Percentage of total inflation allocated to the foundation.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InflationRate.Total">
            <summary>
            Percentage of total inflation.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InflationRate.Validator">
            <summary>
            Percentage of total inflation allocated to validators.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.InflationReward">
            <summary>
            Represents the inflation reward for a certain address.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InflationReward.Epoch">
            <summary>
            Epoch for which a reward occurred.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InflationReward.EffectiveSlot">
            <summary>
            The slot in which the rewards are effective.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InflationReward.Amount">
            <summary>
            The reward amount in lamports.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InflationReward.PostBalance">
            <summary>
            Post balance of the account in lamports.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.InstructionError">
            <summary>
            Represents an Instruction error.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InstructionError.InstructionIndex">
            <summary>
            The index of the instruction that caused the error.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InstructionError.Type">
            <summary>
            The type of the instruction error.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InstructionError.CustomError">
            <summary>
            Possible custom error id from a program.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.InstructionError.BorshIoError">
            <summary>
            Possible string from borsh error.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.InstructionErrorType">
            <summary>
            Possible Types of instruction errors.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.GenericError">
            <summary>
            The program instruction returned an error. (Deprecated)
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.InvalidArgument">
            <summary>
            The arguments provided to a program were invalid
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.InvalidInstructionData">
            <summary>
            
            </summary>An instruction's data contents were invalid
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.InvalidAccountData">
            <summary>
            An account's data contents was invalid
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.AccountDataTooSmall">
            <summary>
            An account's data was too small
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.InsufficientFunds">
            <summary>
            An account's balance was too small to complete the instruction
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.IncorrectProgramId">
            <summary>
            The account did not have the expected program id
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.MissingRequiredSignature">
            <summary>
            A signature was required but not found
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.AccountAlreadyInitialized">
            <summary>
             An initialize instruction was sent to an account that has already been initialized.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.UninitializedAccount">
            <summary>
            An attempt to operate on an account that hasn't been initialized.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.UnbalancedInstruction">
            <summary>
            Program's instruction lamport balance does not equal the balance after the instruction
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ModifiedProgramId">
            <summary>
            Program modified an account's program id
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ExternalAccountLamportSpend">
            <summary>
            Program spent the lamports of an account that doesn't belong to it
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ExternalAccountDataModified">
            <summary>
             Program modified the data of an account that doesn't belong to it
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ReadonlyLamportChange">
            <summary>
            Read-only account's lamports modified
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ReadonlyDataModified">
            <summary>
            Read-only account's data was modified
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.DuplicateAccountIndex">
            <summary>
            An account was referenced more than once in a single instruction 
            (Deprecated, instructions can now contain duplicate accounts)
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ExecutableModified">
            <summary>
            Executable bit on account changed, but shouldn't have
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.RentEpochModified">
            <summary>
            Rent_epoch account changed, but shouldn't have
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.NotEnoughAccountKeys">
            <summary>
             The instruction expected additional account keys
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.AccountDataSizeChanged">
            <summary>
            A non-system program changed the size of the account data
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.AccountNotExecutable">
            <summary>
            The instruction expected an executable account
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.AccountBorrowFailed">
            <summary>
            Failed to borrow a reference to account data, already borrowed
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.AccountBorrowOutstanding">
            <summary>
            Account data has an outstanding reference after a program's execution
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.DuplicateAccountOutOfSync">
            <summary>
            The same account was multiply passed to an on-chain program's entrypoint, but the program
            modified them differently.  A program can only modify one instance of the account because
            the runtime cannot determine which changes to pick or how to merge them if both are modified
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.Custom">
            <summary>
            Allows on-chain programs to implement program-specific error types and see them returned
            by the Solana runtime. A program-specific error may be any type that is represented as
            or serialized to a u32 integer.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.InvalidError">
            <summary>
            The return value from the program was invalid.  Valid errors are either a defined builtin
            error value or a user-defined error in the lower 32 bits.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ExecutableDataModified">
            <summary>
            Executable account's data was modified
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ExecutableLamportChange">
            <summary>
            Executable account's lamports modified
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ExecutableAccountNotRentExempt">
            <summary>
            Executable accounts must be rent exempt
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.UnsupportedProgramId">
            <summary>
            Unsupported program id
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.CallDepth">
            <summary>
            Cross-program invocation call depth too deep
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.MissingAccount">
            <summary>
            An account required by the instruction is missing
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ReentrancyNotAllowed">
            <summary>
            Cross-program invocation reentrancy not allowed for this instruction
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.MaxSeedLengthExceeded">
            <summary>
            Length of the seed is too long for address generation
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.InvalidSeeds">
            <summary>
            Provided seeds do not result in a valid address
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.InvalidRealloc">
            <summary>
            Failed to reallocate account data of this length
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ComputationalBudgetExceeded">
            <summary>
            Computational budget exceeded
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.PrivilegeEscalation">
            <summary>
            Cross-program invocation with unauthorized signer or writable account
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ProgramEnvironmentSetupFailure">
            <summary>
            Failed to create program execution environment
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ProgramFailedToComplete">
            <summary>
            Program failed to complete
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ProgramFailedToCompile">
            <summary>
            Program failed to compile
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.Immutable">
            <summary>
            Account is immutable
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.IncorrectAuthority">
            <summary>
            Incorrect authority provided
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.BorshIoError">
            <summary>
            Failed to serialize or deserialize account data
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.AccountNotRentExempt">
            <summary>
            An account does not have enough lamports to be rent-exempt
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.InvalidAccountOwner">
            <summary>
            Invalid account owner
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.ArithmeticOverflow">
            <summary>
            Program arithmetic overflowed
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.InstructionErrorType.UnsupportedSysvar">
            <summary>
            Unsupported sysvar
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.Log">
            <summary>
            Represents a log during transaction simulation.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.Log.Error">
            <summary>
            The error associated with the transaction simulation.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.Log.Logs">
            <summary>
            The log messages the transaction instructions output during execution.
            <remarks>
            This will be null if the simulation failed before the transaction was able to execute.
            </remarks>
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.LogInfo">
            <summary>
            Represents a log message when subscribing to the log output of the Streaming RPC.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.LogInfo.Signature">
            <summary>
            The signature of the transaction.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.SimulationLogs">
            <summary>
            Represents the result of a transaction simulation.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SimulationLogs.Accounts">
            <summary>
            Account infos as requested in the simulateTransaction method.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SimulationLogs.Error">
            <summary>
            The error associated with the transaction simulation.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SimulationLogs.Logs">
            <summary>
            The log messages the transaction instructions output during execution.
            <remarks>
            This will be null if the simulation failed before the transaction was able to execute.
            </remarks>
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.PerformanceSample">
            <summary>
            Represents a performance sample.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.PerformanceSample.Slot">
            <summary>
            Slot in which sample was taken at.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.PerformanceSample.NumTransactions">
            <summary>
            Number of transactions in sample.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.PerformanceSample.NumSlots">
            <summary>
            Number of slots in sample
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.PerformanceSample.SamplePeriodSecs">
            <summary>
            Number of seconds in a sample window.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.SignatureStatusInfo">
            <summary>
            Represents the signature status information.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SignatureStatusInfo.Slot">
            <summary>
            The slot the transaction was processed in.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SignatureStatusInfo.Confirmations">
            <summary>
            The number of blocks since signature confirmation.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SignatureStatusInfo.Error">
            <summary>
            The error if the transaction failed, null if it succeeded.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SignatureStatusInfo.ConfirmationStatus">
            <summary>
            The transaction's cluster confirmation status, either "processed", "confirmed" or "finalized".
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SignatureStatusInfo.Memo">
            <summary>
            Memo associated with the transaction, null if no memo is present.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SignatureStatusInfo.Signature">
            <summary>
            The transaction signature as base-58 encoded string.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SignatureStatusInfo.BlockTime">
            <summary>
            Estimated production time as Unix timestamp, null if not available.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.SlotInfo">
            <summary>
            Represents the slot info.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SlotInfo.Parent">
            <summary>
            The parent slot.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SlotInfo.Root">
            <summary>
            The root as set by the validator.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.SlotInfo.Slot">
            <summary>
            The current slot.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.StakeActivationInfo">
            <summary>
            Represents the stake activation info.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.StakeActivationInfo.Active">
            <summary>
            Stake active during the epoch.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.StakeActivationInfo.Inactive">
            <summary>
            Stake inactive during the epoch.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.StakeActivationInfo.State">
            <summary>
            The stake account's activation state, one of "active", "inactive", "activating", "deactivating".
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.Supply">
            <summary>
            Represents supply info.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.Supply.Circulating">
            <summary>
            Circulating supply in lamports.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.Supply.NonCirculating">
            <summary>
            Non-circulating supply in lamports.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.Supply.NonCirculatingAccounts">
            <summary>
            A list of account addresses of non-circulating accounts, as strings.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.Supply.Total">
            <summary>
            Total supply in lamports.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TokenAccount">
            <summary>
            Represents a token account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenAccount.Account">
            <summary>
            The token account info.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TokenAccount.PublicKey">
            <summary>
            A base-58 encoded public key representing the account's public key.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TransactionError">
            <summary>
            Represents a Transaction Error.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionError.Type">
            <summary>
            The type of transaction error.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionError.InstructionError">
            <summary>
            The inner instruction error, if the <c>Type</c> is <c>TransactionErrorType.InstructionError</c>.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TransactionErrorType">
            <summary>
            The possible types of Transaction errors.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.AccountInUse">
            <summary>
            An account is already being processed in another transaction in a way
            that does not support parallelism
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.AccountLoadedTwice">
            <summary>
            A `Pubkey` appears twice in the transaction's `account_keys`.  Instructions can reference
            `Pubkey`s more than once but the message must contain a list with no duplicate keys
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.AccountNotFound">
            <summary>
            Attempt to debit an account but found no record of a prior credit.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.ProgramAccountNotFound">
            <summary>
            Attempt to load a program that does not exist
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.InsufficientFundsForFee">
            <summary>
            The from `Pubkey` does not have sufficient balance to pay the fee to schedule the transaction
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.InvalidAccountForFee">
            <summary>
            This account may not be used to pay transaction fees
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.AlreadyProcessed">
            <summary>
            The bank has seen this transaction before. This can occur under normal operation
            when a UDP packet is duplicated, as a user error from a client not updating
            its `recent_blockhash`, or as a double-spend attack.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.BlockhashNotFound">
            <summary>
            The bank has not seen the given `recent_blockhash` or the transaction is too old and
            the `recent_blockhash` has been discarded.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.InstructionError">
            <summary>
            An error occurred while processing an instruction.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.CallChainTooDeep">
            <summary>
             Loader call chain is too deep
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.MissingSignatureForFee">
            <summary>
            Transaction requires a fee but has no signature present
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.InvalidAccountIndex">
            <summary>
            Transaction contains an invalid account reference
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.SignatureFailure">
            <summary>
            Transaction did not pass signature verification
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.InvalidProgramForExecution">
            <summary>
            This program may not be used for executing instructions
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.SanitizeFailure">
            <summary>
            Transaction failed to sanitize accounts offsets correctly
            implies that account locks are not taken for this TX, and should
            not be unlocked.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.ClusterMaintenance">
            <summary>
            Transactions are currently disabled due to cluster maintenance
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Models.TransactionErrorType.AccountBorrowOutstanding">
            <summary>
            Transaction processing left an account with an outstanding borrowed reference
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.TransactionErrorJsonConverter">
            <inheritdoc cref="T:System.Text.Json.Serialization.JsonConverter"/>
        </member>
        <member name="M:Solnet.Rpc.Models.TransactionErrorJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type <c>TransactionError</c>.
            </summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert"> The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Solnet.Rpc.Models.TransactionErrorJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Solnet.Rpc.Models.TransactionError,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Not implemented.
            </summary>
            <param name="writer">n/a</param>
            <param name="value">n/a</param>
            <param name="options">n/a</param>
        </member>
        <member name="T:Solnet.Rpc.Models.TransactionInstruction">
            <summary>
            Represents a transaction instruction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionInstruction.ProgramId">
            <summary>
            The program ID associated with the instruction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionInstruction.Keys">
            <summary>
            The keys associated with the instruction.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.TransactionInstruction.Data">
            <summary>
            The instruction-specific data.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.NodeVersion">
            <summary>
            Represents the current solana versions running on the node.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.NodeVersion.SolanaCore">
            <summary>
            Software version of solana-core.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.NodeVersion.FeatureSet">
            <summary>
            unique identifier of the current software's feature set.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.VoteAccount">
            <summary>
            Represents the account info and associated stake for all the voting accounts in the current bank.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.VoteAccount.RootSlot">
            <summary>
            The root slot for this vote account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.VoteAccount.VotePublicKey">
            <summary>
            The vote account address, as a base-58 encoded string.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.VoteAccount.NodePublicKey">
            <summary>
            The validator identity, as a base-58 encoded string.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.VoteAccount.ActivatedStake">
            <summary>
            The stake, in lamports, delegated to this vote account and active in this epoch.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.VoteAccount.EpochVoteAccount">
            <summary>
            Whether the vote account is staked for this epoch.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.VoteAccount.Commission">
            <summary>
            Percentage of rewards payout owed to the vote account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.VoteAccount.LastVote">
            <summary>
            Most recent slot voted on by this vote account.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.VoteAccount.EpochCredits">
            <summary>
            History of how many credits earned by the end of the each epoch.
            <remarks>
            Each array contains [epoch, credits, previousCredits];
            </remarks>
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Models.VoteAccounts">
            <summary>
            Represents the vote accounts.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.VoteAccounts.Current">
            <summary>
            Current vote accounts.
            </summary>
        </member>
        <member name="P:Solnet.Rpc.Models.VoteAccounts.Delinquent">
            <summary>
            Delinquent vote accounts.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.SolanaRpcClient">
            <summary>
            Implements functionality to interact with the Solana JSON RPC API.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.SolanaRpcClient._idGenerator">
            <summary>
            Message Id generator.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.#ctor(System.String,Microsoft.Extensions.Logging.ILogger,System.Net.Http.HttpClient)">
            <summary>
            Initialize the Rpc Client with the passed url.
            </summary>
            <param name="url">The url of the node exposing the JSON RPC API.</param>
            <param name="logger">The logger to use.</param>
            <param name="httpClient">An http client.</param>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.BuildRequest``1(System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Build the request for the passed RPC method and parameters.
            </summary>
            <param name="method">The request's RPC method.</param>
            <param name="parameters">A list of parameters to include in the request.</param>
            <typeparam name="T">The type of the request result.</typeparam>
            <returns>A task which may return a request result.</returns>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.SendRequestAsync``1(System.String)">
            <summary>
            
            </summary>
            <param name="method">The request's RPC method.</param>
            <typeparam name="T">The type of the request result.</typeparam>
            <returns>A task which may return a request result.</returns>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.SendRequestAsync``1(System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Send a request asynchronously.
            </summary>
            <param name="method">The request's RPC method.</param>
            <param name="parameters">A list of parameters to include in the request.</param>
            <typeparam name="T">The type of the request result.</typeparam>
            <returns>A task which may return a request result.</returns>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetAccountInfoAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetAccountInfoAsync(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetAccountInfo(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetAccountInfo(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetProgramAccountsAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetProgramAccountsAsync(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetProgramAccounts(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetProgramAccounts(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetMultipleAccountsAsync(System.Collections.Generic.IList{System.String},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetMultipleAccountsAsync(System.Collections.Generic.IList{System.String},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetMultipleAccounts(System.Collections.Generic.IList{System.String},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetMultipleAccounts(System.Collections.Generic.IList{System.String},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBalanceAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBalanceAsync(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBalance(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBalance(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBlockAsync(System.UInt64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBlockAsync(System.UInt64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBlock(System.UInt64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBlock(System.UInt64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBlocksAsync(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBlocksAsync(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBlocks(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBlocks(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBlocksWithLimit(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBlocksWithLimit(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBlocksWithLimitAsync(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBlocksWithLimitAsync(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetFirstAvailableBlock">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetFirstAvailableBlock"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetFirstAvailableBlockAsync">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetFirstAvailableBlock"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBlockProductionAsync(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBlockProductionAsync(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBlockProduction(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBlockProduction(System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetHealth">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetHealth"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetHealthAsync">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetHealthAsync"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetLeaderSchedule(System.UInt64,System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetLeaderSchedule(System.UInt64,System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetLeaderScheduleAsync(System.UInt64,System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetLeaderScheduleAsync(System.UInt64,System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetTransactionAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetTransactionAsync(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetTransaction(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetTransaction(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBlockHeightAsync(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBlockHeightAsync(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBlockHeight(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBlockHeight(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBlockCommitmentAsync(System.UInt64)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBlockCommitmentAsync(System.UInt64)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBlockCommitment(System.UInt64)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBlockCommitment(System.UInt64)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBlockTimeAsync(System.UInt64)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBlockTimeAsync(System.UInt64)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetBlockTime(System.UInt64)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetBlockTime(System.UInt64)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetClusterNodesAsync">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetClusterNodesAsync"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetClusterNodes">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetClusterNodes"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetEpochInfoAsync(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetEpochInfoAsync(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetEpochInfo(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetEpochInfo(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetEpochScheduleAsync">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetEpochScheduleAsync"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetEpochSchedule">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetEpochSchedule"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetFeeCalculatorForBlockhashAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetFeeCalculatorForBlockhashAsync(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetFeeCalculatorForBlockhash(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetFeeCalculatorForBlockhash(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetFeeRateGovernorAsync">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetFeeRateGovernorAsync"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetFeeRateGovernor">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetFeeRateGovernor"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetFeesAsync(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetFeesAsync(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetFees(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetFees(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetRecentBlockHashAsync(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetRecentBlockHashAsync(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetRecentBlockHash(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetRecentBlockHash(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetMaxRetransmitSlotAsync">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetMaxRetransmitSlotAsync"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetMaxRetransmitSlot">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetMaxRetransmitSlot"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetMaxShredInsertSlotAsync">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetMaxShredInsertSlotAsync"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetMaxShredInsertSlot">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetMaxShredInsertSlot"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetMinimumBalanceForRentExemptionAsync(System.Int64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetMinimumBalanceForRentExemptionAsync(System.Int64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetMinimumBalanceForRentExemption(System.Int64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetMinimumBalanceForRentExemption(System.Int64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetGenesisHashAsync">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetGenesisHashAsync"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetGenesisHash">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetGenesisHash"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetIdentityAsync">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetIdentityAsync"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetIdentity">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetIdentity"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetInflationGovernorAsync(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetInflationGovernorAsync(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetInflationGovernor(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetInflationGovernor(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetInflationRateAsync">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetInflationRateAsync"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetInflationRate">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetInflationRate"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetInflationRewardAsync(System.Collections.Generic.IList{System.String},System.UInt64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetInflationRewardAsync(System.Collections.Generic.IList{System.String},System.UInt64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetInflationReward(System.Collections.Generic.IList{System.String},System.UInt64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetInflationReward(System.Collections.Generic.IList{System.String},System.UInt64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetLargestAccountsAsync(System.Nullable{Solnet.Rpc.Types.AccountFilterType},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetLargestAccountsAsync(System.Nullable{Solnet.Rpc.Types.AccountFilterType},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetLargestAccounts(System.Nullable{Solnet.Rpc.Types.AccountFilterType},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetLargestAccounts(System.Nullable{Solnet.Rpc.Types.AccountFilterType},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetSnapshotSlotAsync">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetSnapshotSlotAsync"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetSnapshotSlot">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetSnapshotSlot"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetRecentPerformanceSamplesAsync(System.UInt64)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetRecentPerformanceSamplesAsync(System.UInt64)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetRecentPerformanceSamples(System.UInt64)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetRecentPerformanceSamples(System.UInt64)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetSignaturesForAddressAsync(System.String,System.UInt64,System.String,System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetSignaturesForAddressAsync(System.String,System.UInt64,System.String,System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetSignaturesForAddress(System.String,System.UInt64,System.String,System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetSignaturesForAddress(System.String,System.UInt64,System.String,System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetSignatureStatusesAsync(System.Collections.Generic.List{System.String},System.Boolean)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetSignatureStatusesAsync(System.Collections.Generic.List{System.String},System.Boolean)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetSignatureStatuses(System.Collections.Generic.List{System.String},System.Boolean)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetSignatureStatuses(System.Collections.Generic.List{System.String},System.Boolean)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetSlotAsync(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetSlotAsync(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetSlot(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetSlot(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetSlotLeaderAsync(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetSlotLeaderAsync(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetSlotLeader(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetSlotLeader(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetSlotLeadersAsync(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetSlotLeadersAsync(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetSlotLeaders(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetSlotLeaders(System.UInt64,System.UInt64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetStakeActivationAsync(System.String,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetStakeActivationAsync(System.String,System.UInt64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetStakeActivation(System.String,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetStakeActivation(System.String,System.UInt64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetSupplyAsync(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetSupplyAsync(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetSupply(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetSupply(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetTokenAccountBalanceAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetTokenAccountBalanceAsync(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetTokenAccountBalance(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetTokenAccountBalance(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetTokenAccountsByDelegateAsync(System.String,System.String,System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetTokenAccountsByDelegateAsync(System.String,System.String,System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetTokenAccountsByDelegate(System.String,System.String,System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetTokenAccountsByDelegate(System.String,System.String,System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetTokenAccountsByOwnerAsync(System.String,System.String,System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetTokenAccountsByOwnerAsync(System.String,System.String,System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetTokenAccountsByOwner(System.String,System.String,System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetTokenAccountsByOwner(System.String,System.String,System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetTokenLargestAccountsAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetTokenLargestAccountsAsync(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetTokenLargestAccounts(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetTokenLargestAccounts(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetTokenSupplyAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetTokenSupplyAsync(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetTokenSupply(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetTokenSupply(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetTransactionCountAsync(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetTransactionCountAsync(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetTransactionCount(Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetTransactionCount(Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetVersionAsync">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetVersionAsync"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetVersion">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetVersion"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetVoteAccountsAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetVoteAccountsAsync(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetVoteAccounts(System.String,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetVoteAccounts(System.String,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetMinimumLedgerSlotAsync">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetMinimumLedgerSlotAsync"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.GetMinimumLedgerSlot">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.GetMinimumLedgerSlot"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.RequestAirdropAsync(System.String,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.RequestAirdropAsync(System.String,System.UInt64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.RequestAirdrop(System.String,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.RequestAirdrop(System.String,System.UInt64,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.SendTransactionAsync(System.Byte[],System.Boolean,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.SendTransactionAsync(System.Byte[],System.Boolean,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.SendTransactionAsync(System.String,System.Boolean,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.SendTransactionAsync(System.String,System.Boolean,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.SendTransaction(System.String,System.Boolean,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.SendTransaction(System.String,System.Boolean,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.SendTransaction(System.Byte[],System.Boolean,Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.SendTransactionAsync(System.Byte[],System.Boolean,Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.SimulateTransactionAsync(System.String,System.Boolean,Solnet.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.SimulateTransactionAsync(System.String,System.Boolean,Solnet.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.SimulateTransactionAsync(System.Byte[],System.Boolean,Solnet.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.SimulateTransactionAsync(System.Byte[],System.Boolean,Solnet.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.SimulateTransaction(System.String,System.Boolean,Solnet.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.SimulateTransaction(System.String,System.Boolean,Solnet.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaRpcClient.SimulateTransaction(System.Byte[],System.Boolean,Solnet.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})">
            <inheritdoc cref="M:Solnet.Rpc.IRpcClient.SimulateTransaction(System.Byte[],System.Boolean,Solnet.Rpc.Types.Commitment,System.Boolean,System.Collections.Generic.IList{System.String})"/>
        </member>
        <member name="T:Solnet.Rpc.SolanaStreamingRpcClient">
            <summary>
            Implementation of the Solana streaming RPC API abstraction client.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.SolanaStreamingRpcClient._idGenerator">
            <summary>
            Message Id generator.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.SolanaStreamingRpcClient.unconfirmedRequests">
            <summary>
            Maps the internal ids to the unconfirmed subscription state objects.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.SolanaStreamingRpcClient.confirmedSubscriptions">
            <summary>
            Maps the server ids to the confirmed subscription state objects.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.#ctor(System.String,Microsoft.Extensions.Logging.ILogger,Solnet.Rpc.Core.Sockets.IWebSocket)">
            <summary>
            Internal constructor.
            </summary>
            <param name="url">The url of the server to connect to.</param>
            <param name="logger">The possible ILogger instance.</param>
            <param name="websocket">The possible IWebSocket instance.</param>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.HandleNewMessage(System.Memory{System.Byte})">
            <inheritdoc cref="M:Solnet.Rpc.Core.Sockets.StreamingRpcClient.HandleNewMessage(System.Memory{System.Byte})"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.HandleError(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Handles and finishes parsing the contents of an error message.
            </summary>
            <param name="reader">The jsonReader that read the message so far.</param>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.RemoveUnconfirmedSubscription(System.Int32)">
            <summary>
            Removes an unconfirmed subscription.
            </summary>
            <param name="id">The subscription id.</param>
            <returns>Returns the subscription object if it was found.</returns>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.RemoveSubscription(System.Int32,System.Boolean)">
            <summary>
            Removes a given subscription object from the map and notifies the object of the unsubscription.
            </summary>
            <param name="id">The subscription id.</param>
            <param name="shouldNotify">Whether or not to notify that the subscription was removed.</param>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.ConfirmSubscription(System.Int32,System.Int32)">
            <summary>
            Confirms a given subcription based on the internal subscription id and the newly received external id.
            Moves the subcription state object from the unconfirmed map to the confirmed map.
            </summary>
            <param name="internalId"></param>
            <param name="resultId"></param>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.AddSubscription(Solnet.Rpc.Core.Sockets.SubscriptionState,System.Int32)">
            <summary>
            Adds a new subscription state object into the unconfirmed subscriptions map.
            </summary>
            <param name="subscription">The subcription to add.</param>
            <param name="internalId">The internally generated id of the subscription.</param>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.RetrieveSubscription(System.Int32)">
            <summary>
            Safely retrieves a subscription state object from a given subscription id.
            </summary>
            <param name="subscriptionId">The subscription id.</param>
            <returns>The subscription state object.</returns>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.HandleDataMessage(System.Text.Json.Utf8JsonReader@,System.String)">
            <summary>
            Handles a notification message and finishes parsing the contents.
            </summary>
            <param name="reader">The current JsonReader being used to parse the message.</param>
            <param name="method">The method parameter already parsed within the message.</param>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.NotifyData(System.Int32,System.Object)">
            <summary>
            Notifies a given subscription of a new data payload.
            </summary>
            <param name="subscription">The subscription ID received.</param>
            <param name="data">The parsed data payload to notify.</param>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.SubscribeAccountInfoAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo}},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.SubscribeAccountInfoAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo}},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.SubscribeAccountInfo(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo}},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.SubscribeAccountInfo(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo}},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.SubscribeLogInfoAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.LogInfo}},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.SubscribeLogInfoAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.LogInfo}},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.SubscribeLogInfo(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.LogInfo}},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.SubscribeLogInfo(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.LogInfo}},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.SubscribeLogInfoAsync(Solnet.Rpc.Types.LogsSubscriptionType,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.LogInfo}},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.SubscribeLogInfoAsync(Solnet.Rpc.Types.LogsSubscriptionType,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.LogInfo}},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.SubscribeLogInfo(Solnet.Rpc.Types.LogsSubscriptionType,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.LogInfo}},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.SubscribeLogInfo(Solnet.Rpc.Types.LogsSubscriptionType,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.LogInfo}},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.SubscribeSignatureAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.ErrorResult}},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.SubscribeSignatureAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.ErrorResult}},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.SubscribeSignature(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.ErrorResult}},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.SubscribeSignature(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.ErrorResult}},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.SubscribeProgramAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountKeyPair}},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.SubscribeProgramAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountKeyPair}},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.SubscribeProgram(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountKeyPair}},Solnet.Rpc.Types.Commitment)">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.SubscribeProgram(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountKeyPair}},Solnet.Rpc.Types.Commitment)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.SubscribeSlotInfoAsync(System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Models.SlotInfo})">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.SubscribeSlotInfoAsync(System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Models.SlotInfo})"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.SubscribeSlotInfo(System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Models.SlotInfo})">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.SubscribeSlotInfo(System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Models.SlotInfo})"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.SubscribeRootAsync(System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,System.Int32})">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.SubscribeRootAsync(System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,System.Int32})"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.SubscribeRoot(System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,System.Int32})">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.SubscribeRoot(System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,System.Int32})"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.Subscribe(Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.JsonRpcRequest)">
            <summary>
            Internal subscribe function, finishes the serialization and sends the message payload.
            </summary>
            <param name="sub">The subscription state object.</param>
            <param name="msg">The message to be serialized and sent.</param>
            <returns>A task representing the state of the asynchronous operation-</returns>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.UnsubscribeAsync(Solnet.Rpc.Core.Sockets.SubscriptionState)">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.UnsubscribeAsync(Solnet.Rpc.Core.Sockets.SubscriptionState)"/>
        </member>
        <member name="M:Solnet.Rpc.SolanaStreamingRpcClient.Unsubscribe(Solnet.Rpc.Core.Sockets.SubscriptionState)">
            <inheritdoc cref="M:Solnet.Rpc.IStreamingRpcClient.Unsubscribe(Solnet.Rpc.Core.Sockets.SubscriptionState)"/>
        </member>
        <member name="T:Solnet.Rpc.Types.AccountFilterType">
            <summary>
            Represents the filter account type.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Types.AccountFilterType.Circulating">
            <summary>
            Circulating accounts.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Types.AccountFilterType.NonCirculating">
            <summary>
            Non circulating accounts.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Types.BinaryEncoding">
            <summary>
            The encodings used for binary data to interact with the Solana nodes.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Types.BinaryEncoding.JsonParsed">
            <summary>
            Request json parsed data, when a parser is available.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Types.BinaryEncoding.Base58">
            <summary>
            Base58 encoding.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Types.BinaryEncoding.Base64">
            <summary>
            Base64 encoding.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Types.Commitment">
            <summary>
            The commitment describes how finalized a block is at that point in time.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Types.Commitment.Finalized">
            <summary>
            The node will query the most recent block confirmed by supermajority of the cluster as having reached maximum lockout, meaning the cluster has recognized this block as finalized.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Types.Commitment.Confirmed">
            <summary>
            The node will query the most recent block that has been voted on by supermajority of the cluster.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Types.Commitment.Processed">
            <summary>
            The node will query its most recent block. Note that the block may not be complete.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Types.LogsSubscriptionType">
            <summary>
            Enum with the possible vote selection parameter for the log subscription method.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Types.LogsSubscriptionType.All">
            <summary>
            Subscribes to All logs.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Types.LogsSubscriptionType.AllWithVotes">
            <summary>
            Subscribes to All logs including votes.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Types.TransactionDetails">
            <summary>
            Used to specify which block data to retrieve.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Types.TransactionDetails.Full">
            <summary>
            Retrieve the full block data.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Types.TransactionDetails.Signatures">
            <summary>
            Retrieve only signatures, leaving out detailed transaction data.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Types.TransactionDetails.None">
            <summary>
            Retrieve only basic block data.
            </summary>
        </member>
        <member name="T:Solnet.Rpc.Utilities.AddressExtensions">
            <summary>
            Contains helper methods to handle program addresses.
            </summary>
        </member>
        <member name="F:Solnet.Rpc.Utilities.AddressExtensions.ProgramDerivedAddressBytes">
            <summary>
            The bytes of the `ProgramDerivedAddress` string.
            </summary>
        </member>
        <member name="M:Solnet.Rpc.Utilities.AddressExtensions.CreateProgramAddress(System.Collections.Generic.IList{System.Byte[]},System.Byte[])">
            <summary>
            Derives a program address.
            </summary>
            <param name="seeds">The address seeds.</param>
            <param name="programId">The program Id.</param>
            <returns>The address derived.</returns>
            <exception cref="T:System.ArgumentException">Throws exception when one of the seeds has an invalid length.</exception>
            <exception cref="T:System.Exception">Throws exception when the resulting address doesn't fall off the Ed25519 curve.</exception>
        </member>
        <member name="M:Solnet.Rpc.Utilities.AddressExtensions.FindProgramAddress(System.Collections.Generic.IEnumerable{System.Byte[]},System.Byte[])">
            <summary>
            Attempts to find a program address for the passed seeds and program Id.
            </summary>
            <param name="seeds">The address seeds.</param>
            <param name="programId">The program Id.</param>
            <returns>A tuple corresponding to the address and nonce found.</returns>
            <exception cref="T:System.Exception">Throws exception when it is unable to find a viable nonce for the address.</exception>
        </member>
        <member name="M:Solnet.Rpc.Utilities.AddressExtensions.Sha256(System.Byte[])">
            <summary>
            Calculates the SHA256 of the given data.
            </summary>
            <param name="data">The data to hash.</param>
            <returns>The hash.</returns>
        </member>
    </members>
</doc>
